<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Peter Friese]]></title>
  <link href="http://www.peterfriese.de/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://www.peterfriese.de/"/>
  <updated>2013-08-10T04:38:10+01:00</updated>
  <id>http://www.peterfriese.de/</id>
  <author>
    <name><![CDATA[Peter Friese]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Do Androids Dream of Electric Sheep?]]></title>
    <link href="http://www.peterfriese.de/do-androids-dream-of-electric-sheep/"/>
    <updated>2013-03-22T00:33:48+00:00</updated>
    <id>http://www.peterfriese.de/do-androids-dream-of-electric-sheep</id>
    <content type="html"><![CDATA[<p>Humans have always been fascinated by the idea of talking with machines. Almost no main stream science fiction movie exists that does not pick up the idea of audio-visual communication with computers, the most well-known probably being <em>2001 - A Space Odyssey</em>, <em>Blade Runner</em>, <em>Star Trek</em>, <em>The Hitchhiker’s Guide to the Galaxy</em> and <em>I, Robot</em>.</p>

<!-- more -->


<p>In all of these movies, humans can directly communicate with computers using voice commands (“Tea. Earl Grey, hot”) or more elaborate sentences and the computers will talk back to humans as a result. In some of the movies, the computer is a non-bodily entity (like the ship’s main computer in Star Trek), but sometimes it even is humanoid (like Cmdr. Data in <em>Star Trek</em> or the Replicants in <em>Blade Runner</em>).</p>

<p>In a Pecha Kucha presentation I recently delivered at the OOP conference in Munich, I took on this theme and started my talk with a imaginative conversation between two computer programs that most of you might know very well: Eliza and Siri.</p>

<p><div class="embed-video-container"><iframe src="http://player.vimeo.com/video/61467056 "></iframe></div></p>

<p>In this Pecha Kucha session, Siri and Eliza join me live on stage to explain why we do not (yet) use the potential of our smart phones.</p>

<p>Much has been said about Siri, so let’s focus on Eliza.</p>

<p>Eliza started as an experiment in 1964, when Joseph Weizenbaum, then professor of computer sciences at the MIT, wrote it as an early attempt to research natural language communication between man and computer (see his ACM paper “ELIZA - A Computer Program For the Study of Natural Language Communication Between Man And Machine”). At its heart, Eliza is program that reacts to specific key words in sentences entered by a human user and will then respond to those keywords according to a predefined script. It’s the script that basically makes up the “personality” of Eliza, the most famous one being <em>Doctor</em>, simulating a rogerian psychoanalyst.</p>

<p>(Weizenbaum was rather surprised to see how people thought that Eliza had a real personality and a capacity for empathy. In reaction, he started to raise uncomfortable questions about our dependence on computers.)</p>

<p>In my Pecha Kucha, I went on to tell my audience to make better use of the capabilities of our smart phones. Most people have stopped thinking about it, but after all, we’re carrying a super computer in our pockets.</p>

<p>So to set a good example, I decided to create <a href="http://elizaapp.com">ElizaApp</a> - an app that can listen to what you say and answer in spoken language. This is going to be a great project, because I’ll show several very interesting things:</p>

<ol>
<li><p>How to analyse spoken language on a mobile device</p></li>
<li><p>How to synthesize speech on mobile devices</p></li>
<li><p>How to integrate a JavaScript engine in your mobile app</p></li>
<li><p>How to create a Siri-look-alike chat UI</p></li>
</ol>


<p>Over the course of the next few weeks, I will write several posts covering these topics. If there is anything that interests you in particular, feel free to add a comment.</p>

<p>Of course, in the end Eliza will be available on the App Store. In the mean time, be sure to check out <a href="http://elizaapp.com">ElizaApp</a> and register for early access!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using CocoaPods to manage your dependencies]]></title>
    <link href="http://www.peterfriese.de/using-cocoapods-to-manage-your-dependencies/"/>
    <updated>2012-06-29T23:42:22+01:00</updated>
    <id>http://www.peterfriese.de/using-cocoapods-to-manage-your-dependencies</id>
    <content type="html"><![CDATA[<p>One of the few things that I find really annoying about developing apps for the iOS platform is how cumbersome it is to include third party libraries in your projects. Depending on the complexity of the library (e.g. its respective dependencies and transitive dependencies) and the effort the authors put into the consumability of their library, the steps required to add a library to your project range from just copying a few files into your source folder to a whopping two-page description of drag'n'drop wizardry.</p>

<!--more-->


<p>Wouldn't it be awesome if you could just specify a list of dependencies and be done? You might have heard of RubyGems, Maven, Ivy, NuGet or npm that bring dependency management to the worlds of Ruby, Java, .NET and JavaScript developers.</p>

<p>Well, it turns out there finally is a solution for us Cocoa developers - CocoaPods. Getting started with CocoaPods is really easy and once you started using it, you won't look back again.</p>

<h2>Installation</h2>

<p>CocoaPods itself is distributed as a Ruby gem, so installing it is as simple as:</p>

<p><code>bash
[sudo] gem install cocoapods
pod setup
</code></p>

<h2>Usage</h2>

<p>Using CocoaPods to manage your project's dependencies is a two-step process:</p>

<ol>
<li>Specify the dependency in you project's dependency specification file, <code>Podfile</code></li>
<li>Run <code>pod install</code></li>
</ol>


<p>Let me illustrate this by way of a simple example. Let's assume you want to build an application with the awesome <a href="http://www.restkit.org">RestKit</a> library. If you have used RestKit before, you know that adding it to your project is a rather involved process. Over the years, it has become significantly easier, but it still needs a very detailed installation instruction with lots of screenshots - check out their <a href="https://github.com/RestKit/RestKit/wiki/Installing-RestKit-in-Xcode-4.x">wiki page</a>.</p>

<p>With CocoaPods, all you need to do is this:</p>

<ul>
<li>Create a new empty project, naming it <code>RestEasyWithCocoaPods</code></li>
<li>In your project folder, create a new file, <code>Podfile</code></li>
<li>Fill in the following information:</li>
</ul>


<p>``` ruby Podfile</p>

<pre><code>platform :ios
dependency 'RestKit'
dependency 'RestKit/UI'
dependency 'RestKit/Network'
dependency 'RestKit/ObjectMapping'
dependency 'RestKit/ObjectMapping/CoreData'
dependency 'RestKit/ObjectMapping/XML'
dependency 'RestKit/ObjectMapping/JSON'
</code></pre>

<p>```</p>

<ul>
<li>Run <code>pod install RestEasyWithCocoaPods.xcodeproj</code></li>
<li>Open the newly created workspace, <code>RestEasyWithCocoaPods.xcworkspace</code></li>
<li>Add the RestKit headers to <code>RestEasyWithCocoaPods-Prefix.pch</code>:</li>
</ul>


<p>``` objc RestEasyWithCocoaPods-Prefix.pch</p>

<pre><code>#ifdef __OBJC__
#import &lt;UIKit/UIKit.h&gt;
#import &lt;Foundation/Foundation.h&gt;
#import &lt;RestKit/RestKit.h&gt;
#endif
</code></pre>

<p>```</p>

<ul>
<li>Done. Go and build awesome stuff with RestKit (more on this in another post).</li>
</ul>


<h2>Where to go from here</h2>

<p>Wasn't that a lot easier than all the other ways to install third party libraries?</p>

<p>If you are curious which libraries are supported by CocoaPods, go to <a href="http://cocoapods.org">CocoaPods.org</a> - they have a nice little UI for searching their pod specification repository. If you are more include to using the command line, you are welcome to use <code>pod search &lt;yoursearchterm&gt;</code> to search for a specific library.</p>

<p>If your preferred library is not yet supported, why not help them out and build a pod spec? <a href="https://github.com/CocoaPods/CocoaPods">CocoaPods</a> itself and the <a href="https://github.com/CocoaPods/Specs">pod spec repository</a> are hosted on Github, so adding new pod specifications is really easy. The CocoaPods wiki has a section on <a href="https://github.com/CocoaPods/CocoaPods/wiki/The-podspec-format">creating</a> and <a href="https://github.com/CocoaPods/CocoaPods/wiki/Sharing-pod-specifications-with-yourself-and-the-world">publishing</a> new podspec files.</p>

<p>Now go and create awesome stuff!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Accounts and Twitter Framework on iOS 5]]></title>
    <link href="http://www.peterfriese.de/the-accounts-and-twitter-framework-on-ios-5/"/>
    <updated>2011-11-09T23:30:46+00:00</updated>
    <id>http://www.peterfriese.de/the-accounts-and-twitter-framework-on-ios-5</id>
    <content type="html"><![CDATA[<p>Adding Twitter support is something that makes quite a lot of sense for a number of applications. If you're in a news reader application you might want to let your followers know about an interesting article you just read. If you're in a conference schedule app, you not only want to let your followers know about the awesome talks you're listening to but you also might want to know which other talks other conference attendees are tweeting about to decide whether they are actually even more awesome than that talk you're stuck in...</p>

<!-- more -->


<p>Starting with iOS 5, Apple has introduced an <a href="http://developer.apple.com/library/ios/#documentation/Twitter/Reference/TwitterFrameworkReference/_index.html">official API for accessing Twitter from your iOS</a> applications. Before iOS 5, integrating Twitter in your apps was a rather cumbersome experience which required us developers to jump through many hoops.</p>

<p>In this post I want to outline the most important features of the iOS Twitter and Accounts APIs and explain how to use them to write a decent Twitter client for your next app in very few lines of code. The <a href="http://github.com/peterfriese/TwitterClient">full source code</a> is available on Github for your convenience.</p>

<p>The Accounts and Twitter frameworks perform much of the heavy lifting required when talking to Twitter, such as</p>

<ul>
<li>Providing a secure local storage for user accounts, including their credentials</li>
<li>Providing an easy way to sign API requests you send to Twitter. You no longer have to include code to handle <a href="https://dev.twitter.com/docs/auth/oauth/faq">OAuth</a> or <a href="https://dev.twitter.com/docs/oauth/xauth">xAuth</a> in your app - this has all been done by Apple for you</li>
<li>Providing a basic UI for composing tweets, including switching the user account you tweet from, uploading images in a tweet and including your current location</li>
</ul>


<p>Lots of free stuff, so let's have a look at how much (or little) code we actually need to write to tap this source of awesomeness.</p>

<h2>Using the Accounts Framework to fetch the list of accounts</h2>

<p>The <a href="http://developer.apple.com/library/ios/#documentation/Accounts/Reference/AccountsFrameworkRef/_index.html">Accounts Framework</a> provides access to all Twitter accounts the user has added to their iPhone using the settings app. Currently, the Accounts Framework only supports Twitter accounts, but you'll soon realize it has been build so that it basically can be used to access any other kind of account in future releases. Maybe the next version of iOS will provide easy access to Google+ and Facebook accounts -  we'll see.</p>

<p>To use the Accounts and Twitter frameworks, we need to add them to the project:</p>

<p><img class="center" src="../images/2011-11-09-the-accounts-and-twitter-framework-on-ios-5/add_twitter_accounts.png" title="Add Accounts and Twitter frameworks to the project" ></p>

<p>Once that's done, we can use the Accounts framework to fetch the list of Twitter accounts on the device.</p>

<p>``` objc
- (void)fetchData
{</p>

<pre><code>if (_accounts == nil) {
    if (_accountStore == nil) {
        self.accountStore = [[ACAccountStore alloc] init];
    }
    ACAccountType *accountTypeTwitter = 
        [self.accountStore
            accountTypeWithAccountTypeIdentifier:ACAccountTypeIdentifierTwitter];
    [self.accountStore requestAccessToAccountsWithType:accountTypeTwitter
        withCompletionHandler:^(BOOL granted, NSError *error) {
        if(granted) {
            dispatch_sync(dispatch_get_main_queue(), ^{
                self.accounts = [self.accountStore
                accountsWithAccountType:accountTypeTwitter];
                [self.tableView reloadData]; 
            });
        }
    }];
}
</code></pre>

<p>}
```</p>

<p>Just like many other new APIs that perform potentially blocking I/O, the Accounts framework uses blocks to execute your code as soon as the data you requested is available. When querying the accounts database, we can specify the kind of accounts we're interested in - <code>ACAccountTypeIdentifierTwitter</code> in our case. If we're granted access to the accounts database, we fetch the list of accounts using <code>accountsWithAccountType:</code>. As soon as we've got this list, we want to save it in a ivar / property and update the UI. Since there is no guarantee we're on the UI thread when our completion handler is run, we use <code>dispatch_sync</code> to ensure assigning the list of accounts and updating the UI is run on the UI thread (<code>dispatch_get_main_queue()</code> returns the GCD queue of the UI thread). For more information on blocks and Grand Central Dispatch (GCD) check out <a href="http://www.mikeash.com/pyblog/friday-qa-2009-08-28-intro-to-grand-central-dispatch-part-i-basics-and-dispatch-queues.html">this excellent blog post</a>.</p>

<p>Displaying the accounts in a <code>UITableViewController</code> is straightforward:</p>

<p>```objc
- (UITableViewCell <em>)tableView:(UITableView </em>)tableView</p>

<pre><code>    cellForRowAtIndexPath:(NSIndexPath *)indexPath
</code></pre>

<p>{</p>

<pre><code>static NSString *CellIdent = @"Cell";

UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdent];
if (cell == nil) {
    cell = [[UITableViewCell alloc] 
    initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdent];
}

// Configure the cell...
ACAccount *account = [self.accounts objectAtIndex:[indexPath row]];
cell.textLabel.text = account.username;
cell.detailTextLabel.text = account.accountDescription;
cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
return cell;
</code></pre>

<p>}
```</p>

<h2>Displaying the public timeline of the selected user</h2>

<p>When the user selects one of the accounts, we want to display a list of recent tweets for this selected account. We'll use <code>TWRequest</code> to fetch the list of recent tweets.</p>

<p><code>TWRequest</code> is the centerpiece of the iOS Twitter Framework and relieves us of the burden of having to perform OAuth authentication and request signing on our own. In order for it to do this, we need to provide a reference to the account whose timeline we want to read. We also need to provide the URL of the Twitter API endpoint we want to access. While this might seem a little bit cumbersome at first, this allows us to access not only current API calls but also any new APIs Twitter might come up with in the future without requiring Apple to update the API. Pretty nifty.</p>

<p>``` objc</p>

<pre><code>- (void)fetchData
{
    TWRequest *postRequest = [[TWRequest alloc] 
        initWithURL:
            [NSURL URLWithString:@"https://api.twitter.com/1/statuses/home_timeline.json"] 
        parameters:nil 
        requestMethod:TWRequestMethodGET];

    [postRequest setAccount:self.account];    
    [postRequest performRequestWithHandler:^(NSData *responseData, 
            NSHTTPURLResponse *urlResponse, 
            NSError *error) {
        if ([urlResponse statusCode] == 200) {
            NSError *jsonError = nil;
            self.timeline = [NSJSONSerialization JSONObjectWithData:responseData 
                options:0 
                error:&amp;jsonError;];
            dispatch_sync(dispatch_get_main_queue(), ^{
                [self.tableView reloadData];
            });
        }
    }];
}
</code></pre>

<p>```</p>

<p>Again, we need to provide a completion handler which will be invoked as soon as the call to Twitter returns. As you can also see, we're using the same approach as before to make sure we update the UI from the UI thread. It's also interesting to see Apple provides us with their own JSON parsing framework - no longer do we need to integrate third party libraries to serialize / deserialize JSON data.</p>

<h2>Sending Tweets</h2>

<p>So far, we can choose a Twitter account from the list of Twitter accounts on our iPhone and display the home timeline of this particular user. But how about sending a tweet?</p>

<p>Sending tweets is really easy: you just have to instantiate a new <code>TWTweetComposeViewController</code> and display it - iOS will take care of the rest:</p>

<p>``` objc</p>

<pre><code>- (void)composeTweet
{
    TWTweetComposeViewController *tweetComposeViewController = 
        [[TWTweetComposeViewController alloc] init];
    [tweetComposeViewController setCompletionHandler:
            ^(TWTweetComposeViewControllerResult result) {
        [self dismissModalViewControllerAnimated:YES];
    }];
    [self presentModalViewController:tweetComposeViewController animated:YES];
}
</code></pre>

<p>```</p>

<p>The completion handler is merely needed to dismiss the tweet composition view after the tweet has been sent.</p>

<h2>Conclusion</h2>

<p>Integrating Twitter in your own apps has never been easier. With just a few lines of code, we implemented a basic version of a Twitter client that you can use to display a user's home timeline and send tweets. Elaborating this code base is left as an exercise to you - feel free to <a href="http://github.com/peterfriese/TwitterClient">fork the code on Github</a> and send me pull requests as you add interesting features!</p>

<p>Here's an impression of the current state of the application:</p>

<p><ul class="gallery">
<li><a href="/images/2011-11-09-the-accounts-and-twitter-framework-on-ios-5/twitter_client_1.png" class="fancybox" rel="gallery-dc42c338437a41c21e197e5ab323fb78" title="Twitter Client - List of local accounts"><img src="/thumbs/twitter_client_1_120x150.png" alt="Twitter Client - List of local accounts" /></a></li>
<li><a href="/images/2011-11-09-the-accounts-and-twitter-framework-on-ios-5/twitter_client_2.png" class="fancybox" rel="gallery-dc42c338437a41c21e197e5ab323fb78" title="Twitter Client - Home timeline for a user"><img src="/thumbs/twitter_client_2_120x150.png" alt="Twitter Client - Home timeline for a user" /></a></li>
<li><a href="/images/2011-11-09-the-accounts-and-twitter-framework-on-ios-5/twitter_client_3.png" class="fancybox" rel="gallery-dc42c338437a41c21e197e5ab323fb78" title="Twitter Client - Composing a tweet"><img src="/thumbs/twitter_client_3_120x150.png" alt="Twitter Client - Composing a tweet" /></a></li>
</ul></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using NSPredicate to Filter Data]]></title>
    <link href="http://www.peterfriese.de/using-nspredicate-to-filter-data/"/>
    <updated>2011-04-22T23:15:36+01:00</updated>
    <id>http://www.peterfriese.de/using-nspredicate-to-filter-data</id>
    <content type="html"><![CDATA[<p>Filtering data is one of the essential tasks in computing. With all the data available today, we need to apply certain limits and constraints to actually make it usable. What use is it to be able to scroll down a list of literally thousands of list items when you really care about one or two of them? Filtering and searching information make up a significant part of our work day - each time you use Google, you're applying a filter to the huge set of data we call the internet.</p>

<!-- more -->


<p>Even on your local computer, you use services like Spotlight or the search field in your mail application all the time. Apps that lack decent searching and filtering capabilities sometimes are really hard to use, so as developers we should spend some time on thinking how to allow users to filter the data they're dealing with.</p>

<p>In this post, I am going to focus on ways to filter data. We won't be looking at the UI side of things - this is something I'll do in a subsequent blog post.</p>

<h2>Old-skool filtering</h2>

<p>If you look at an arbitrary code base, chances are you'll sooner or later run into a piece of code similar to this one:</p>

<p>``` objc</p>

<pre><code>NSMutableArray *oldSkoolFiltered = [[NSMutableArray alloc] init];
for (Book *book in bookshelf) {
    if ([book.publisher isEqualToString:@"Apress"]) {
        [oldSkoolFiltered addObject:book];
    }
}
</code></pre>

<p>```</p>

<p>It's a straight-forward approach to filtering an array of items (in this case, we're talking about books) using a rather simple <code>if</code>-statement. Nothing wrong with this, but despite the fact we're using a fairly simple expression here, the code is rather verbose. We can easily imagine what will happen in case we need to use more complicated selection criteria or a combination of filtering criteria.</p>

<h2>Simple filtering with NSPredicate</h2>

<p>Thanks to Cocoa, we can simplify the code by using <a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSPredicate_Class/Reference/NSPredicate.html">NSPredicate</a>. <code>NSPredicate</code> is the object representation of an if-statement, or, more formally, a predicate.</p>

<p>Predicates are <a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSPredicate_Class/Reference/NSPredicate.html">expressions that evaluate to a truth value</a>, i.e. <code>true</code> or <code>false</code>. We can use them to perform validation and filtering. In Cocoa, we can use <code>NSPredicate</code> to evaluate single objects, filter arrays and perform queries against Core Data data sets.</p>

<p>Let's have a look at how our example looks like when using <code>NSPredicate</code>:</p>

<p>``` objc</p>

<pre><code>NSPredicate *predicate = 
  [NSPredicate predicateWithFormat:@"publisher == %@", @"Apress" ];
NSArray *filtered  = [bookshelf filteredArrayUsingPredicate:predicate];
</code></pre>

<p>```</p>

<p>Much shorter and better readable!</p>

<h2>Filtering with Regular Expressions</h2>

<p>Regular Expressions can be used to <a href="http://xkcd.com/208/">solve almost any problem ;-)</a> so it's good to know you can use them in <code>NSPredicate</code>s as well. To use regular expressions in your <code>NSPredicate</code>, you need to use the <code>MATCHES</code> operator.</p>

<p>Let's filter all books that are about iPad or iPhone programming:</p>

<p>``` objc</p>

<pre><code>predicate = [NSPredicate predicateWithFormat:@"title MATCHES '.*(iPhone|iPad).*'"];
filtered = [bookshelf filteredArrayUsingPredicate:predicate];
dumpBookshelf(@"Books that contain 'iPad' or 'iPhone' in their title", filtered);
</code></pre>

<p>```</p>

<p>You need to obey some rules when using regular expressions in <code>NSPredicate</code>: most importantly, <a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Predicates/Articles/pUsing.html#//apple_ref/doc/uid/TP40001794-SW9">you cannot use regular expression metacharacters inside a pattern set</a>.</p>

<h2>Filtering using set operations</h2>

<p>Let's for a moment assume you want to filter all books that have been published by your favorite publishers. Using the <code>IN</code> operator, this is rather simple: first, we need to set up a set containing the publishers we're interested in. Then, we can create the predicate and finally perform the filtering operation:</p>

<p>``` objc</p>

<pre><code>NSArray *favoritePublishers = [NSArray arrayWithObjects:@"Apress", @"O'Reilly", nil];
predicate = [NSPredicate predicateWithFormat:@"publisher IN %@", favoritePublishers];
filtered  = [bookshelf filteredArrayUsingPredicate:predicate];
dumpBookshelf(@"Books published by my favorite publishers", filtered);
</code></pre>

<p>```</p>

<h2>Advanced filtering thanks to KVC goodness</h2>

<p><code>NSPredicate</code> relies on <a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/KeyValueCoding/Articles/KeyValueCoding.html">key-value coding</a> to achieve its magic. On one hand this means your classes need to be <a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/KeyValueCoding/Articles/Compliant.html#//apple_ref/doc/uid/20002172-BAJEAIEE">KVC compliant</a> in order to be queried using <code>NSPredicate</code> (at least the attributes you want to query). On the other hand, this allows us to perform some very interesting things with very little lines of code.</p>

<p>Let's for example retrieve a list of books written by authors with the name "Mark":</p>

<p>``` objc</p>

<pre><code>predicate = 
  [NSPredicate predicateWithFormat:@"authors.lastName CONTAINS %@", @"Mark" ];
filtered  = [bookshelf filteredArrayUsingPredicate:predicate];
</code></pre>

<p>```</p>

<p>In case we'd want to return the value of one of the aggregate functions, we don't need to use NSPredicate itself, but instead use KVC directly. Let's retrieve the average price of all books on our shelf:</p>

<p>``` objc</p>

<pre><code>NSNumber *average = [bookshelf valueForKeyPath:@"@avg.price"];
</code></pre>

<p>```</p>

<h2>Conclusion</h2>

<p>The Cocoa libraries provide some very powerful abstractions which can make your life and that of the people reading your code much easier. It pays off to know about them, so go ahead and browse the Cocoa documentation and hunt for those gems!</p>

<p>Apple's <a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Predicates/predicates.html">NSPredicate programming guide</a> provides an in-depth documentation for <code>NSPredicate</code> containing all the things I didn't cover in this post.</p>

<p><code>NSPredicate</code> also plays an important role when querying data in Core Data, something we will need to have a look at in one of the next blog posts. Stay tuned!</p>

<h2>Code</h2>

<p>The code for this post is available on my github page: <a href="http://github.com/peterfriese/NSPredicateDemo">get forking</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Save a Tree, Put EclipseCon 2011 in Your Pocket]]></title>
    <link href="http://www.peterfriese.de/save-a-tree-put-eclipsecon-2011-in-your-pocket/"/>
    <updated>2011-02-25T22:15:57+00:00</updated>
    <id>http://www.peterfriese.de/save-a-tree-put-eclipsecon-2011-in-your-pocket</id>
    <content type="html"><![CDATA[<p>After the huge success of the mobile apps for Eclipse Summit Europe, we decided to provide mobile apps for EclipseCon 2011, too. So instead of using a printed copy of the conference program, you can browse the schedule on your smart phone - wherever you are!</p>

<!-- more -->


<p>This year, we're providing a rather impressive lineup of mobile apps for iPhone, iPod Touch, iPad (thanks to <a href="http://www.compeople.eu/blog/?p=786">Christian Campo who created a stand-alone iPad app</a>), BlackBerry (<a href="http://ekkes-apps.org/">Ekke is working on a updated version, AFAIK</a>), and all other smart phones that feature a browser.</p>

<p>All apps allow you to browse the program, select your favorite talks and get to know the speakers (with headshots so you recognise them in the hallways). We also have included maps of the convention center as well as Santa Clara.</p>

<p>For a first glimpse, watch our video:</p>

<p><div class="embed-video-container"><iframe src="http://player.vimeo.com/video/20377509 "></iframe></div></p>

<p>As of today, both iPhone and Android users can download the apps from the Apple App Store respectively the Android Marketplace. Here are the links:</p>

<ol>
<li><a href="http://bit.ly/econ2011iphone">EclipseCon 2011 iPhone App</a></li>
<li><a href="http://bit.ly/econ2011android">EclipseCon 2011 Android App</a></li>
</ol>


<p>If you don't own an iPhone or Android, you can always use the HTML-only version of the conference program available at <a href="http://bit.ly/econ2011html">http://bit.ly/econ2011html</a>.</p>

<p>The iPad and BlackBerry apps will be available soon, so stay tuned!</p>

<p>By the way, if <strong>you</strong> run a conference and are interested in having an app like this, <a href="http://mobile.itemis.com">get in touch with us</a>.</p>
]]></content>
  </entry>
  
</feed>
