<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OSGi | Peter Friese]]></title>
  <link href="http://peterfriese.github.io/blog/categories/osgi/atom.xml" rel="self"/>
  <link href="http://peterfriese.github.io/"/>
  <updated>2013-06-17T00:39:44+02:00</updated>
  <id>http://peterfriese.github.io/</id>
  <author>
    <name><![CDATA[Peter Friese]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OSGi & Servlets: Flexibility by Simplicity]]></title>
    <link href="http://peterfriese.github.io/osgi-servlets-flexibility-by-simplicity/"/>
    <updated>2010-04-26T12:24:03+02:00</updated>
    <id>http://peterfriese.github.io/osgi-servlets-flexibility-by-simplicity</id>
    <content type="html"><![CDATA[<p><strong>Strangely enough</strong>, simple things tend to be more flexible than complex things. I bet you too have seen people go to great lengths to ensure a certain solution provides utmost flexibility. <!-- more -->Often, this flexibility isn't needed, so you're introducing accidental complexity.</p>

<p>In <a href="http://www.peterfriese.de/osgi-servlets-a-happy-marriage/">a recent post</a>, I showed you how to create a plain servlet and register it in an OSGi environment. As both <a href="http://eclipsesource.com/blogs/author/jeff/">Jeff</a> and <a href="http://www.composent.com/">Scott</a> pointed out, my using a <em>ServiceTracker</em> to register and unregister the servlet is a little bit clumsy and can be improved by using Declarative Services.</p>

<p>I highly recommend reading chapter 15 in "<a href="http://my.safaribooksonline.com/9780321561510">OSGi and Equinox</a>", but in a nutshell Declarative Services allow you to define <em>components</em> which can provide and consume <em>services</em>. <em>Binding</em> and <em>unbinding</em> references between components and services is performed by the DS runtime (also known as the Service Component Runtime).</p>

<p>Without further ado, here are the changes I had to make to DS-ify my simple servlet:</p>

<ol>
<li><p>Remove the activator. Yes, that's true: we don't need an Activator any more. Delete the class and also remove it from <em>META-INF/MANIFEST.MF</em></p></li>
<li><p>Delete <em>HttpServiceTracker</em>. Registering the servlet with the <em>HTTPService</em> will be handled by the DS runtime.</p></li>
<li><p>Implement a <em>component</em> to register and unregister the servlet with the <em>HttpService</em>:</p></li>
</ol>


<pre><code>public class SimpleComponent {
  private static final String SERVLET_ALIAS = "/hellods";
  private HttpService httpService;

  public void setHttpService(HttpService httpService) {
    this.httpService = httpService;
  }

  protected void startup() {
    try {
      System.out.println("Staring up sevlet at " + SERVLET_ALIAS);
      SimpleServlet servlet = new SimpleServlet();
      httpService.registerServlet(SERVLET_ALIAS, servlet, null, null);
    } catch (ServletException e) {
      e.printStackTrace();
    } catch (NamespaceException e) {
      e.printStackTrace();
    }
  }

  protected void shutdown() {
    httpService.unregister(SERVLET_ALIAS);
  }
}
</code></pre>

<p>As you can see, the <em>HttpService</em> will be injected into this component using it's setter method, <em>setHttpService</em>.</p>

<ol>
<li>Register this component with the DS runtime by adding a component description:</li>
</ol>


<pre><code>&lt;scr:component deactivate="shutdown" activate="startup" xmlns:scr="http://www.osgi.org/xmlns/scr/v1.1.0" name="simple.ds.component"&gt;
  &lt;implementation class="simple.ds.servlet.SimpleComponent"&gt;&lt;/implementation&gt;
  &lt;reference interface="org.osgi.service.http.HttpService" bind="setHttpService"&gt;&lt;/reference&gt;
&lt;/scr:component&gt;
</code></pre>

<p>I saved this file in <em>OSGI-INF/component.xml</em> and added it to the <em>Service-Component</em> section of <em>META-INF/MANIFEST.MF</em>. In fact, as I used the <em>Create New OSGi Component</em> wizard, the wizard added the entry to the <em>ServiceComponent</em> section - it's really easy to forget this if you do it manually!</p>

<p>That's it!</p>

<p><strong>Please note</strong> that I did not change the servlet implementation at all (apart form issuing a different text to make it easier to tell the servlets apart)!</p>

<p><strong>Before launching</strong>, please make sure to add <em>org.eclipse.equinox.ds</em> and <em>org.eclipse.equinox.util</em> to your launch config to enable Declarative Services.</p>

<p>The biggest advantage of this approach is that you do not have to take care of acquiring the <em>HTTPService</em>. The DS runtime will <em>only</em> activate your component when all prerequisites have been met, i.e., all dependencies are available. If the <em>HttpService</em> is not available for any reason, your component will not be started. This makes the code for registering the servlet simpler and cleaner.</p>

<p>You can <a href="http://code.google.com/p/peterfriese/source/browse/#svn/osgi/trunk/simple.ds.servlet">download the source for the DS-ified servlet</a> from my SVN repository on Google Code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSGi & Servlets: Deploying on Amazon EC2]]></title>
    <link href="http://peterfriese.github.io/osgi-servlets-deploying-on-amazon-ec2/"/>
    <updated>2010-04-16T03:04:09+02:00</updated>
    <id>http://peterfriese.github.io/osgi-servlets-deploying-on-amazon-ec2</id>
    <content type="html"><![CDATA[<p>Last week, <a href="http://www.peterfriese.de/osgi-servlets-a-happy-marriage/">I showed you how to create a very simple OSGi-based servlet</a> and run it locally on Jetty. Today, I will show you how to deploy this servlet to an Amazon EC2 instance.</p>

<!-- more -->


<p>We will first set up an Amazon EC2 instance and then export the servlet and install it in this instance.</p>

<h2>Setting up an Amazon EC2 instance</h2>

<p>Scott Lewis <a href="http://eclipseecf.blogspot.com/2010/03/osgieclipsert-in-amazon-cloud.html">was kind enough to prepare an Amazon EC2 Machine Image (AMI)</a> that already contains Jetty, Equinox and p2 - everything we need to get our servlet running. So let's use this AMI to provision our instance:</p>

<ol>
<li><p>Sign in to the <a href="https://console.aws.amazon.com/ec2/home">AWS web console</a></p></li>
<li><p>Click on <em>Launch instance</em> to create a new instance</p></li>
<li><p>In the <em>Request Instances Wizard</em>, jump over to the <em>Community AMIs</em> tab</p></li>
<li><p>Type <em>OSGi</em> in the search field to search for <strong><em>ami-69d93600</em></strong></p></li>
<li><p>Select the AMI</p></li>
<li><p>In the next step, you get to configure the instance. A small instance will do for now.</p></li>
<li><p>Leave the <em>Advanced Instance</em> options as-is</p></li>
<li><p>Next, you need to create a key pair (this will allow you to sign in to the instance using SSH). If you haven't created an EC2 instance before, select <em>Create a new Key Pair</em> and follow the instructions. Otherwise, select an existing key pair</p></li>
<li><p>To access the instance from outside using HTTP and SSH, you need to create and assign a <em>security group</em>. Make sure to add SSH and HTTP port configurations to this security group. Unfortunately, it is not possible to freely choose the port ranges, so we need to edit the security group after we're finished with the wizard.</p></li>
<li><p>On the summary page, review the configuration and click on <em>Launch</em> to actually start your instance.</p></li>
</ol>


<p>After a little while, the newly created instance will show up in the list of AMIs. You can test your instance by opening a terminal window and SSH'ing to your instance:</p>

<pre><code>ssh -i path/to/your/privatekey.pem root@ec2-xxx-xx-xx-xx.compute-1.amazonaws.com
</code></pre>

<p>You should be greeted with a prompt like this:</p>

<pre><code>        __|  __|_  )  Fedora 8
        _|  (     /    32-bit
       ___|\___|___|

Welcome to an EC2 Public Image
                      :- )
   Base
</code></pre>

<p>Start the EclipseRT server as follows:</p>

<pre><code>cd /env/osgi_eclipsert36_sb_p2_jetty_7_0_1_linux_x86/jetty-distribution-7.0.1.v20091125/
./eclipsert36.sh
</code></pre>

<p>Your Eclipse RT Equinox server is now up and running. Time to export the servlet!</p>

<h2>Exporting the servlet</h2>

<p>We will export our simple servlet using a feature based update site, so it can be installed using p2.</p>

<p><strong>First,</strong> create a new feature project, naming it <em>simple.servlet.feature</em>. Provide the following details to the wizard:</p>

<ol>
<li><p><em>ID:</em> simple.servlet.feature</p></li>
<li><p><em>Version:</em> 1.0.0.qualifier</p></li>
<li><p><em>Name:</em> Simple Servlet Feature</p></li>
<li><p><em>Provider:</em> Your name</p></li>
</ol>


<p>Open the <em>Plug-ins</em> page and add <em>simple.servlet</em> to the list of packages plug-ins.</p>

<p><strong>Now,</strong> we can create the update site. It will only contain the feature we just created. Using the <em>New Update Site</em> wizard, create a new update site project, naming it <em>simple.servlet.updatesite</em>. Add the feature we just created to the list of features on the first page of the <em>site.xml</em> Update Site Map.</p>

<p><strong>When you're done with that, </strong>, you can build the update site by pressing the <em>Build All</em> button. This will build the servlet plug-in, the feature and finally the update site. After that, we're ready to deploy.</p>

<h2>Installing the servlet</h2>

<p>Installing the servlet into our Amazon EC2 instance is quite easy, as we can leverage p2:</p>

<p><strong>Using your favourite SFTP client,</strong> copy the entire update into the <em>/tmp</em> directory of your Amazon EC2 instance. When that's done, hop over to your terminal window that's connected to the OSGi console of your Eclipse RT server (remember, we started this server when setting up the Amazon EC2 instance). Issue the following commands:</p>

<pre><code>provaddrepo file:/tmp/simple.servlet.updatesite
provliu
provinstall simple.servlet  1.0.0.201004091446
confapply
</code></pre>

<p><strong>Make sure you use the correct version identifier, it is likely to be different from the one I used here!</strong></p>

<p>You can now list the installed bundles by invoking <em>ss</em>:</p>

<pre><code>ss
...
38      ACTIVE      org.eclipse.equinox.preferences_3.3.0.v20100208
39      ACTIVE      org.eclipse.equinox.registry_3.5.0.v20100301
40      ACTIVE      org.eclipse.equinox.security_1.0.200.v20100301
41      ACTIVE      org.eclipse.equinox.server.examples.hello_1.0.0.201003111015
42      ACTIVE      org.eclipse.equinox.simpleconfigurator.manipulator_2.0.0.v20100304
43      ACTIVE      org.eclipse.equinox.util_1.0.100.v20090520-1800
44      RESOLVED    org.eclipse.osgi.services_3.2.100.v20100108
45      RESOLVED    org.sat4j.core_2.2.0.v20100225
46      RESOLVED    org.sat4j.pb_2.2.0.v20100225
47      RESOLVED    simple.servlet_1.0.0.201004081743
</code></pre>

<p><strong>Start</strong> the servlet by typing <em>start 47</em> (again, please use the bundle ID issued by <em>ss</em>).</p>

<p><strong>Open a webbrowser</strong> and navigate to ec2-xxx-xx-xx-xx.compute-1.amazonaws.com:8080/simple (the DNS address is the same you used to SSH to your instance) and you should see the servlet output:</p>

<pre><code>Hello from the cloud!
</code></pre>

<h2>Conclusion</h2>

<p>In this post, you saw how easy it is to create an Amazon EC2 instance and deploy an OSGi-based servlet on it. With this knowledge, you can now start sky-diving into the joys of cloud computing. Have fun!</p>

<p>Most of this information has been taken from the <a href="http://wiki.eclipse.org/EclipseRT_for_Amazon_EC2">Eclipse Wiki</a>. You are encouraged to add your own tips &amp; tricks to this <a href="http://wiki.eclipse.org/EclipseRT_for_Amazon_EC2">wiki page</a>. All you need is an Eclipse Bugzilla account. Setting one up is easy, start <a href="https://bugs.eclipse.org/bugs/createaccount.cgi">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSGi & Servlets: A Happy Marriage]]></title>
    <link href="http://peterfriese.github.io/osgi-servlets-a-happy-marriage/"/>
    <updated>2010-04-07T14:40:41+02:00</updated>
    <id>http://peterfriese.github.io/osgi-servlets-a-happy-marriage</id>
    <content type="html"><![CDATA[<p>In this post, I'll show you how to create a simple OSGI-based servlet. Later, we will deploy this servlet to an Amazon EC 2 instance - this should be fun!</p>

<!-- more -->


<blockquote><p><strong>Update</strong>: I updated the code sample to use Declarative Services, as suggested by Jeff and Scott in the comments of this post. After reading this article, <a href="http://www.peterfriese.de/osgi-servlets-flexibility-by-simplicity/">please refer to this other post to learn about</a> the changes.</p></blockquote>

<p><strong>First of all</strong>, some preliminary steps. We need to create a new OSGi project and add some dependencies:</p>

<ol>
<li><p>Create a new plug-in project, naming it <em>simple.servlet</em>. Make sure to select <em>Equinox</em> as the target OSGI framework on the first page of the wizard. Also make sure you've got an activator (that option is on by default).</p></li>
<li><p>Open the manifest editor and add the following packages to the Imported Packages section on the Dependencies tab:</p></li>
</ol>


<pre><code>* javax.servlet


* javax.servlet.http


* org.osgi.framework


* org.osgi.service.http


* org.osgi.util.tracker
</code></pre>

<p><strong>Next</strong>, let's create the servlet. Servlets are plain Java classes that implement the javax.servlet.Servlet interface. As we want to serve information over HTTP, we can just create a subclass of javax.servlet.http.HttpServlet which already does some of the heavy lifting for us. All we need to do is override the doGet() method. This method does not have a return value. Instead, we need to fill its second parameter, <code>HttpServletResponse resp</code> with the text we want the web browser to display. We could return HTML, but for simplicity's sake, let's just return plain text (so make sure to set the content type to <code>text/plain</code>):</p>

<pre><code>package simple.servlet;
import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class SimpleServlet extends HttpServlet {
  private static final long serialVersionUID = 1L;

  protected void doGet(HttpServletRequest req, HttpServletResponse resp) 
    throws ServletException, IOException {
    resp.setContentType("text/plain");
    resp.getWriter().write("Hello from the cloud!");
  }
}
</code></pre>

<p><strong>In order for the servlet to be accessible</strong> via HTTP, we need to register it. If you have done some JEE/J2EE development, you know that servlets are registered using the <code>web.xml</code> servlet descriptor. As we're not in the JEE world any longer, we can't go down this road. Instead, we will register the servlet using a <code>org.osgi.util.tracker.ServiceTracker</code>. It's a little bit more code to write, but let me tell you: it's worth it as you'll see very soon.</p>

<p>The service tracker will be registered for a specific class - in our case that's <code>org.osgi.service.http.HttpService</code>:</p>

<pre><code>package simple.servlet;

import org.osgi.framework.BundleContext;
import org.osgi.framework.ServiceReference;
import org.osgi.service.http.HttpService;
import org.osgi.util.tracker.ServiceTracker;

public class HttpServiceTracker extends ServiceTracker {

  public HttpServiceTracker(BundleContext context) {
    super(context, HttpService.class.getName(), null);
  }
  // ...
</code></pre>

<p>When the service tracker is asked to return the <code>HttpService</code>, we can register our servlet:</p>

<pre><code>  // ...
  public Object addingService(ServiceReference reference) {
    HttpService httpService = (HttpService) super.addingService(reference);
    if (httpService == null)
      return null;

    try {
      System.out.println("Registering servlet at /simple");
      httpService.registerServlet("/simple", new SimpleServlet(), null, null);
    } catch (Exception e) {
      e.printStackTrace();
    }

    return httpService;
  }
  /...
</code></pre>

<p>Likewise, we must make sure to unregister the servlet when the service tracker is asked to shut down the <code>HttpService</code></p>

<pre><code>  // ..
  public void removedService(ServiceReference reference, Object service) {
    HttpService httpService = (HttpService) service;

    System.out.println("Unregistering /simple");
    httpService.unregister("/simple");

    super.removedService(reference, service);
  }

}
</code></pre>

<p><strong>Now</strong> that we've got the servlet in place, we need to make sure the service tracker is started and stopped when our bundle is started and stopped. Those of you familiar with OSGi know where we're heading now: we need to implement the <code>start()</code> and <code>stop()</code> methods of our activator:</p>

<pre><code>package simple.servlet;

import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;

public class Activator implements BundleActivator {

  private HttpServiceTracker serviceTracker;

  public void start(BundleContext context) throws Exception {
    serviceTracker = new HttpServiceTracker(context);
    serviceTracker.open();
  }

  public void stop(BundleContext context) throws Exception {
    serviceTracker.close();
    serviceTracker = null;
  }

}
</code></pre>

<p><strong>To test your servlet locally</strong>, create a new launch config:</p>

<ol>
<li><p>In the main menu, select <em>Run -> Run Configurations...</em></p></li>
<li><p>Double click on <em>OSGi Framework</em> in the tree on the left hand side to create a new OSGi-based launch config
and name it <em>Simple Servlet (OSGi)</em></p></li>
<li><p>Make sure you select the following <strong>eight (8)</strong> bundles on the <em>Bundles</em> tab:</p></li>
</ol>


<pre><code>1. simple.servlet


2. javax.servlet


3. org.eclipse.equinox.http.jetty


4. org.eclipse.equinox.http.servlet


5. org.eclispe.osgi


6. org.eclispe.osgi.services


7. org.mortbay.jetty.server


8. org.mortbay.jetty.util
</code></pre>

<ol>
<li>Head over to the <em>Arguments</em> tab, making sure the <em>VM arguments</em> text box reads <code>-Declipse.ignoreApp=true -Dosgi.noShutdown=true -Dorg.osgi.service.http.port=8080</code></li>
</ol>


<p><strong>You can now start the server</strong> by executing the launch config. After a very short time, the text <code>Registering servlet at /simple</code> should appear in the console window, indicating your OSGi-based server and your servlet have been started up (a lot faster that it would have taken on Tomcat or any other JEE server, for that matter).</p>

<p><strong>Open your web browser</strong> at <a href="http://localhost:8080/simple">http://localhost:8080/simple</a> to observe your servlet in action:</p>

<p><a href="http://farm3.static.flickr.com/2775/4499763290_c0045c441b_o.jpg"><img src="http://farm3.static.flickr.com/2775/4499763290_00e3405795_m.jpg" alt="OSGi SimpleServlet, local deployment" /></a></p>

<p><strong>Congratulations</strong>, you've just built your first OSGi-enabled servlet. In the next post, I'll show you how to deploy this servlet in an Amazon EC2 instance. You can <a href="http://code.google.com/p/peterfriese/source/browse/#svn/osgi/trunk/simple.servlet">download the source code</a> for this post from my SVN repository on Google code.</p>
]]></content>
  </entry>
  
</feed>
