<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Eclipse | Peter Friese]]></title>
  <link href="http://www.peterfriese.de/blog/categories/eclipse/atom.xml" rel="self"/>
  <link href="http://www.peterfriese.de/"/>
  <updated>2014-04-06T20:29:54+01:00</updated>
  <id>http://www.peterfriese.de/</id>
  <author>
    <name><![CDATA[Peter Friese]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unit Testing Android Apps with Robolectric and Eclipse]]></title>
    <link href="http://www.peterfriese.de/unit-testing-android-apps-with-robolectric-and-eclipse/"/>
    <updated>2013-11-27T09:54:00+00:00</updated>
    <id>http://www.peterfriese.de/unit-testing-android-apps-with-robolectric-and-eclipse</id>
    <content type="html"><![CDATA[<p>A few weeks ago, I showed you how to set up Robolectric with Android Studio and Gradle. For the Eclipse DemoCamp in Hamburg, I have been asked to prepare a session on how to use Robolectric with Eclipse. I thought it might be worthwhile to share my experiences with everybody who wasn&rsquo;t fortunate enough to attend the DemoCamp (in a truely stunning location, BTW), so here goes.</p>

<!-- more -->


<p>We all know testing is essential to verify the behaviour of the software you write. In the Android world with its huge variety of devices and OS versions, this is even more so. Unfortunately, the performance of the Android development environment, most notably the Android Emulator, leaves much to be desired which sometimes leads to neglicence of test discipline. Robolectric is a test framework that tries to alleviate this situation.</p>

<p>Robolectric achieves this by sitting between your code and the Android OS code intercepting calls and redirecting them to shadow objects, making it possible to run your tests inside a regular JVM. This effectively means you can run your tests on your desktop &ndash; no waiting for your code to be deployed to the Emulator or a physical device!</p>

<p>For more detailed background information about the inner workings of Roboloectric, check out <a href="http://www.slideshare.net/tylerschultz/robolectric-android-unit-testing-framework">this presentation</a> and this <a href="http://www.youtube.com/watch?v=T6FWL877txw">talk by Tyler Schultz</a>, one of the committers of Robolectric.</p>

<h2>Creating a New Project</h2>

<p>As the blog title implies, this time around, we&rsquo;ll use Eclipse to create our project under test. Make sure you&rsquo;re using the most recent version of the Eclipse ADT, which is part of the Android SDK. If you don&rsquo;t have it already, Google provides a nice all-in-one download of the SDK <a href="http://developer.android.com/sdk/index.html">here</a>.</p>

<p>Create a new project, using the following settings:</p>

<ul>
<li>Application Name: <code>RobolectricDemoProjectEclipse</code></li>
<li>Project Name: <code>RobolectricDemoProjectEclipse</code></li>
<li>Package Name: <code>de.peterfriese.robolectricdemo</code></li>
<li>Minimum SDK: <code>API 8: Android 2.2 (Froyo)</code></li>
<li>Target SDK: <code>API 18: Android 4.3</code></li>
<li>Compile With: <code>API 19: Android 4.4 (KitKat)</code></li>
</ul>


<p>Choose to create a custom icon and a custom launcher and place the project in a location of your liking.</p>

<p><ul class="gallery">
<li><a href="/images/2013-11-27-unit-testing-android-apps-with-robolectric-and-eclipse/robolectric_new_project_1.png" class="fancybox" rel="gallery-71c5a075199ab4106dd4dd708b445982" title="New Create New Project &ndash; Step 1"><img src="/thumbs/robolectric_new_project_1_200x150.png" alt="New Create New Project &ndash; Step 1" /></a></li>
<li><a href="/images/2013-11-27-unit-testing-android-apps-with-robolectric-and-eclipse/robolectric_new_project_2.png" class="fancybox" rel="gallery-71c5a075199ab4106dd4dd708b445982" title="New Create New Project &ndash; Step 2"><img src="/thumbs/robolectric_new_project_2_200x150.png" alt="New Create New Project &ndash; Step 2" /></a></li>
<li><a href="/images/2013-11-27-unit-testing-android-apps-with-robolectric-and-eclipse/robolectric_new_project_3.png" class="fancybox" rel="gallery-71c5a075199ab4106dd4dd708b445982" title="New Create New Project &ndash; Step 3"><img src="/thumbs/robolectric_new_project_3_200x150.png" alt="New Create New Project &ndash; Step 3" /></a></li>
</ul></p>

<p>On the <em>Create Activity</em> page, choose <em>Blank Activity</em>, and on the <em>Blank Activity</em> configuration page use the following settings:</p>

<ul>
<li>Activiy Name: <code>Main Actity</code></li>
<li>Layout Name: <code>activity_main</code></li>
<li>Navigation Type: <code>None</code></li>
</ul>


<p>To make things a bit more interesting, let&rsquo;s change the UI so we&rsquo;ve got a <code>TextView</code>, an <code>InputView</code> and a <code>Button</code> on, just like this:</p>

<p>```xml res/layout/fragment_main.xml</p>

<pre><code>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingBottom="@dimen/activity_vertical_margin"
    tools:context=".MainActivity$PlaceholderFragment"&gt;

    &lt;TextView
        android:text="@string/hello_world"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textAppearance="?android:attr/textAppearanceLarge"
        android:id="@+id/textView"
        android:layout_alignRight="@+id/editText"
        android:layout_alignParentLeft="true"/&gt;

    &lt;EditText
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:id="@+id/editText"
        android:layout_below="@+id/textView"
        android:layout_marginTop="24dp"
        android:layout_alignParentRight="true"
        android:layout_alignParentLeft="true"/&gt;

    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Say Hi!"
        android:id="@+id/button"
        android:layout_below="@+id/editText"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="45dp"/&gt;

&lt;/RelativeLayout&gt;
</code></pre>

<p>```</p>

<p><a href="/images/2013-11-27-unit-testing-android-apps-with-robolectric-and-eclipse/ui_layout.png" class="fancybox" title="Application Under Test UI"><img class="center" src="/thumbs/ui_layout_200x400.png" alt="Application Under Test UI" /></a></p>

<h2>Preparing for Testing</h2>

<p>To prepare your project for testing with Robolectric in Eclipse, there are a few things you need to do:</p>

<ol>
<li>Create a test project</li>
<li>Add Robolectric and its dependencies</li>
<li>Help Robolectric to find the Android manifest</li>
</ol>


<h3>Creating a Test Project</h3>

<p>The great thing about Robolectric is your tests are plain JUnit tests, so there is no need to run the tests on a device or the Emulator. This means we can use a plain Java project to host our tests.</p>

<ol>
<li>Create a new Java project, naming it <code>RobolectricDemoProjectEclipseTests</code></li>
<li>On the second page of the wizard, add a project reference to the Android project (<code>RobolectricDemoProjectEclipse</code>)</li>
</ol>


<p><ul class="gallery">
<li><a href="/images/2013-11-27-unit-testing-android-apps-with-robolectric-and-eclipse/testproject_1.png" class="fancybox" rel="gallery-8df2dbdc48dd06236a2b0a654863ff32" title="New Create New Test Project &ndash; Step 1"><img src="/thumbs/testproject_1_200x150.png" alt="New Create New Test Project &ndash; Step 1" /></a></li>
<li><a href="/images/2013-11-27-unit-testing-android-apps-with-robolectric-and-eclipse/testproject_2.png" class="fancybox" rel="gallery-8df2dbdc48dd06236a2b0a654863ff32" title="New Create New Test Project &ndash; Step 2"><img src="/thumbs/testproject_2_200x150.png" alt="New Create New Test Project &ndash; Step 2" /></a></li>
</ul></p>

<h3>Adding Robolectric and its Dependencies</h3>

<p>By now, you might be wondering why we don&rsquo;t use Maven to set up our dependencies. To cut a long story short: setting up an Android project in Eclipse is a lot easier without using Maven. The downside of this approach, however, is that we have to manage project dependencies ourselves.</p>

<p>Head over to <a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.robolectric%22">Maven Central</a> to fetch the <a href="http://search.maven.org/remotecontent?filepath=org/robolectric/robolectric/2.2/robolectric-2.2-jar-with-dependencies.jar">latest version of Robolectric including dependencies</a> (at the time of this writing, Robolectric 2.2 was the most up-to-date version).</p>

<p>In <code>RobolectricDemoProjectEclipseTests</code>, create a new folder <code>libs</code> and add the downloaded jar file by dragging it to the folder. After that, right-click the added file in Eclipse and choose <em>Build Path &ndash;> Add to Build Path</em> to add it to the build path.</p>

<p>Later, we will use <a href="http://square.github.io/fest-android/">FEST Android</a> to write our test assertations in a fluent way, so we need the required jar files and add the to the project as well.</p>

<ul>
<li>Latest <a href="http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&amp;g=com.squareup&amp;a=fest-android&amp;v=LATEST">FEST Android jar</a></li>
<li>Latest <a href="http://search.maven.org/remotecontent?filepath=org/easytesting/fest-assert-core/2.0M10/fest-assert-core-2.0M10.jar">FEST jar</a></li>
</ul>


<p>As JUnit is the base for all our unit tests, we need to add it to our classpath, too. Open the project&rsquo;s properties, navigate to <em>Java Build Path &ndash;> Libraries</em> and click on <em>Add Library&hellip;</em>. In the next dialog, choose <em>JUnit</em> and press <em>Next</em>. Finaly, choose <em>JUnit 4</em> (Robolectric relies on JUnit 4) and press <em>Finish</em>.</p>

<p><ul class="gallery">
<li><a href="/images/2013-11-27-unit-testing-android-apps-with-robolectric-and-eclipse/add_junit_1.png" class="fancybox" rel="gallery-a8c42e4e03479bd09d2b0e1d5e6938d2" title="Adding JUnit 4 &ndash; Step 1"><img src="/thumbs/add_junit_1_200x150.png" alt="Adding JUnit 4 &ndash; Step 1" /></a></li>
<li><a href="/images/2013-11-27-unit-testing-android-apps-with-robolectric-and-eclipse/add_junit_2.png" class="fancybox" rel="gallery-a8c42e4e03479bd09d2b0e1d5e6938d2" title="Adding JUnit 4 &ndash; Step 2"><img src="/thumbs/add_junit_2_200x150.png" alt="Adding JUnit 4 &ndash; Step 2" /></a></li>
<li><a href="/images/2013-11-27-unit-testing-android-apps-with-robolectric-and-eclipse/add_junit_3.png" class="fancybox" rel="gallery-a8c42e4e03479bd09d2b0e1d5e6938d2" title="Adding JUnit 4 &ndash; Step 3"><img src="/thumbs/add_junit_3_200x150.png" alt="Adding JUnit 4 &ndash; Step 3" /></a></li>
</ul></p>

<p>Finally, we need to add the Android library itself as a dependency to our test project. To do this, open then project properties dialog (Right-click the test project, select <em>Properties</em>) and navigate to <em>Java Build Path</em>. In the dialog, click on <em>Add External JARs&hellip;</em> and navigate to <code>&lt;Android SDK&gt;/platforms/android-19/android.jar</code> to add the latest Android jar to the projects build path.</p>

<p><ul class="gallery">
<li><a href="/images/2013-11-27-unit-testing-android-apps-with-robolectric-and-eclipse/add_android.png" class="fancybox" rel="gallery-60ff47917794e39212af739e4db0b6e3" title="Adding the Android jar"><img src="/thumbs/add_android_200x150.png" alt="Adding the Android jar" /></a></li>
</ul></p>

<h3>Helping Robolectric to Find Your Manifest</h3>

<p>Because of the way Robolectric looks for your <code>AndroidManifest.xml</code> during test startup, it won&rsquo;t find the manifest if your tests and the manifest are located in different projects.</p>

<p>Robolectric supports configuring individual tests using the <code>@Config</code> annotation, allowing you to use a different manifest file depending on the test you run. This can be quite handy, but it is a good idea to have a default configuration. Starting with version 2.0, Robolectric supports a global configuration using a config file.</p>

<p>To specifiy a manifest file, place a file named <code>org.robolectric.Config.properties</code> in the root of the <code>src</code> tree of your test project, so it can be discovered by Robolectric during test setup and add the following line:</p>

<p>```properties src/org.robolectric.Config.properties</p>

<pre><code>manifest=../RobolectricDemoProjectEclipse/AndroidManifest.xml
</code></pre>

<p>```</p>

<p>This will tell Robolectric to use the <code>AndroidManifest.xml</code> file from our Android project under test.</p>

<h2>Writing Your First Robolectric Test</h2>

<p>Let&rsquo;s write our first test! Add the following class to <code>src/test/java</code>:</p>

<p>```java MainActivityTest.java</p>

<pre><code>package de.peterfriese.robolectricdemo;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.robolectric.Robolectric;
import org.robolectric.RobolectricTestRunner;


import static org.junit.Assert.assertTrue;

@RunWith(RobolectricTestRunner.class)
public class MainActivityTest {

    @Test
    public void shouldFail() {
        assertTrue(false);
    }
}
</code></pre>

<p>```</p>

<p>Please note that we added a simple test method, making sure it will fail. Why is this a good idea? Well, it makes sure our test fails when running it, so we can be sure the whole setup actually works. If we run the test and it <em>does not</em> fail, we know that something is wrong.</p>

<p>So, let&rsquo;s run the test! Right-click on the test file and choose <em>Run As &ndash;> JUnit Test</em>. As a result, you should see the test bar turn red in the JUnit view.</p>

<p>The test failed &ndash; just as expected. You can turn it into a passing test by changing the assert statement to <code>assertTrue(true);</code></p>

<h2>Enhancing the Test</h2>

<p>Now that we&rsquo;ve got everything in place, let&rsquo;s develop a small feature in a test-driven way. You already noted how we enhanced the UI of the application at the beginning, but apart from looking nice, there&rsquo;s not much functionality.</p>

<p>Let&rsquo;s enhance the app so the user can enter their name, press a button and be greeted by the application.</p>

<p>Make sure to statically import the Android FEST assertations &ndash; they&rsquo;ll help us to write our tests in a fluent manner:</p>

<p>``` java</p>

<pre><code>import static org.fest.assertions.api.ANDROID.assertThat;
</code></pre>

<p>```</p>

<p>As we need to have access to the app&rsquo;s main activity in all of our tests, let&rsquo;s add a private field for it and create a setup method that will create a fresh activity before each test is run:</p>

<p>```java MainActivity.java</p>

<pre><code>private MainActivity activity;

@Before
public void setup() {
    activity = Robolectric.buildActivity(MainActivity.class).get();
}
</code></pre>

<p>```</p>

<p>It is a good practice to ensure the UI is fired up and all UI elements have been initialized as expected (i.e. are not null):</p>

<p>```java MainActivityTest.java</p>

<pre><code>@Test
public void shouldNotBeNull() {
    assertThat(activity).isNotNull();

    TextView textView = (TextView) activity.findViewById(R.id.textView);
    assertThat(textView).isNotNull();

    Button button = (Button) activity.findViewById(R.id.button);
    assertThat(button).isNotNull();

    EditText editText = (EditText) activity.findViewById(R.id.editText);
    assertThat(editText).isNotNull();
}
</code></pre>

<p>```</p>

<p>Next, let&rsquo;s write a test that places a text inside the edit field, presses the button and compares the result in the text view with the expected result.</p>

<p>Here is the test method:</p>

<p>```java MainActivityTest.java</p>

<pre><code>@Test
public void shouldProduceGreetingWhenButtonPressed() {
    TextView textView = (TextView) activity.findViewById(R.id.textView);
    Button button = (Button) activity.findViewById(R.id.button);
    EditText editText = (EditText) activity.findViewById(R.id.editText);

    editText.setText("Peter");
    button.performClick();

    assertThat(textView).containsText("Hello, Peter!");
}
</code></pre>

<p>```</p>

<p>When you run the test, it will obviously fail, so let&rsquo;s fix this.</p>

<p>Open <code>MainActivity.java</code> and insert the following private class:</p>

<p>```java MainActivity.java</p>

<pre><code>public static class MainFragment extends Fragment {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button button = (Button) this.findViewById(R.id.button);
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                TextView textView = (TextView) MainActivity.this.findViewById(R.id.textView);
                EditText editText = (EditText) MainActivity.this.findViewById(R.id.editText);

                textView.setText(String.format("Hello, %s!", editText.getText()));
            }
        });
    }
}
</code></pre>

<p>```</p>

<p>As you can see, this code will register an <code>OnClickListener</code> for the button and set the text of the text view according to the value of the edit field.</p>

<p>The test should now pass &ndash; just run the unit test again and you should see a green bar.</p>

<h2>Conclusion</h2>

<p>Setting up an Android project for using Robolectric in Eclipse is quite a bit of work, as you just have seen, but it&rsquo;s reasonably easy with the information I have given you above. Adding Robolectric to a new Android project is just a matter of minutes with these instructions and helps you save a lot of time you&rsquo;d have had to spend otherwise running the tests on the emulator or on physical devices.</p>

<p>You might be interested in checking out my recent post on integrating Robolectric in a Gradle-based Android project in Android Studio &ndash; <a href="/android-testing-with-robolectric/">this way, please</a>.</p>

<h2>Slides and Source Code</h2>

<p>Here are the slides I used for presenting this topic at <a href="http://wiki.eclipse.org/Eclipse_DemoCamps_November_2013/Hamburg">Eclipse Democamp November 2013 in Hamburg</a>:</p>

<p><iframe src="http://www.slideshare.net/slideshow/embed_code/28679137 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe> </p>

<p>The source code for this blog post can be found on <a href="https://github.com/peterfriese/RobolectricDemoProjectEclipse">Github</a> &ndash; clone and enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Save a Tree, Put EclipseCon 2011 in Your Pocket]]></title>
    <link href="http://www.peterfriese.de/save-a-tree-put-eclipsecon-2011-in-your-pocket/"/>
    <updated>2011-02-25T22:15:57+00:00</updated>
    <id>http://www.peterfriese.de/save-a-tree-put-eclipsecon-2011-in-your-pocket</id>
    <content type="html"><![CDATA[<p>After the huge success of the mobile apps for Eclipse Summit Europe, we decided to provide mobile apps for EclipseCon 2011, too. So instead of using a printed copy of the conference program, you can browse the schedule on your smart phone &ndash; wherever you are!</p>

<!-- more -->


<p>This year, we&rsquo;re providing a rather impressive lineup of mobile apps for iPhone, iPod Touch, iPad (thanks to <a href="http://www.compeople.eu/blog/?p=786">Christian Campo who created a stand-alone iPad app</a>), BlackBerry (<a href="http://ekkes-apps.org/">Ekke is working on a updated version, AFAIK</a>), and all other smart phones that feature a browser.</p>

<p>All apps allow you to browse the program, select your favorite talks and get to know the speakers (with headshots so you recognise them in the hallways). We also have included maps of the convention center as well as Santa Clara.</p>

<p>For a first glimpse, watch our video:</p>

<p><div class="embed-video-container"><iframe src="http://player.vimeo.com/video/20377509 "></iframe></div></p>

<p>As of today, both iPhone and Android users can download the apps from the Apple App Store respectively the Android Marketplace. Here are the links:</p>

<ol>
<li> <a href="http://bit.ly/econ2011iphone">EclipseCon 2011 iPhone App</a></li>
<li> <a href="http://bit.ly/econ2011android">EclipseCon 2011 Android App</a></li>
</ol>


<p>If you don&rsquo;t own an iPhone or Android, you can always use the HTML-only version of the conference program available at <a href="http://bit.ly/econ2011html">http://bit.ly/econ2011html</a>.</p>

<p>The iPad and BlackBerry apps will be available soon, so stay tuned!</p>

<p>By the way, if <strong>you</strong> run a conference and are interested in having an app like this, <a href="http://mobile.itemis.com">get in touch with us</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use the Gyroscope of Your iPhone in a Mobile Web App]]></title>
    <link href="http://www.peterfriese.de/how-to-use-the-gyroscope-of-your-iphone-in-a-mobile-web-app/"/>
    <updated>2010-11-25T12:00:43+00:00</updated>
    <id>http://www.peterfriese.de/how-to-use-the-gyroscope-of-your-iphone-in-a-mobile-web-app</id>
    <content type="html"><![CDATA[<p>This week&rsquo;s release of iOS 4.2 for iPad and iPhone comes with some nice little features most people will not immediately become aware of as they&rsquo;re neither directly visible in the iOS UI nor are they mentioned in Apple&rsquo;s official release notes. You have to dig a little deeper to find them. One of them is a JavaScript API for the iPhone&rsquo;s gyroscope. Read on to see it in action and learn how to use it.</p>

<!-- more -->


<p>Your iPhone has a number of sensors, some of which are rather essential for the phone&rsquo;s operation (such as the microphone). While the accelerometer and the gyroscope might not be the most essential sensors for a phone, they&rsquo;re certainly the most exciting ones. While accelerometer measures the acceleration you induce on the phone, the gyroscope gives a rather precise feedback on the orientation of the phone.</p>

<p>Until now, web developers didn&rsquo;t have access to the accelerometer sensor and the gyroscope sensor. With this week&rsquo;s release of iOS 4.2, this has changed and we can now use <a href="https://developer.apple.com/library/safari/#documentation/SafariDOMAdditions/Reference/DeviceMotionEventClassRef/DeviceMotionEvent/DeviceMotionEvent.html">DeviceMotionEvent</a> and <a href="https://developer.apple.com/library/safari/#documentation/SafariDOMAdditions/Reference/DeviceOrientationEventClassRef/DeviceOrientationEvent/DeviceOrientationEvent.html">DeviceOrientationEvent</a> to determine the acceleration and orientation data of the phone.</p>

<p>Let&rsquo;s first determine whether the current browser supports device orientation sensing:</p>

<p><code>javascript
if (window.DeviceMotionEvent==undefined) {
}
</code></p>

<p>We can then read the sensor data by registering the respective callbacks. Here&rsquo;s how you read the accelerometer&rsquo;s data:</p>

<p>``` javascript
window.ondevicemotion = function(event) {
  ax = event.accelerationIncludingGravity.x
  ay = event.accelerationIncludingGravity.y
  az = event.accelerationIncludingGravity.z
  rotation = event.rotationRate;
  if (rotation != null) {</p>

<pre><code>arAlpha = Math.round(rotation.alpha);
arBeta = Math.round(rotation.beta);
arGamma = Math.round(rotation.gamma);
</code></pre>

<p>  }
}
```</p>

<p>The gyroscope&rsquo;s data can be read like this:</p>

<p><code>javascript    
window.ondeviceorientation = function(event) {
  alpha = Math.round(event.alpha);
  beta = Math.round(event.beta);
  gamma = Math.round(event.gamma);
}
</code></p>

<p>I&rsquo;ve put together a little demo that uses the sensor data to color some boxes on the phone&rsquo;s screen. Here&rsquo;s a short video showing it in action:</p>

<p><div class="embed-video-container"><iframe src="http://player.vimeo.com/video/17182364 "></iframe></div></p>

<p>If you want to take it for a spin, open this URL in mobile safari on your phone: <a href="http://demos.peterfriese.de/gyro/gyro.html">http://demos.peterfriese.de/gyro/gyro.html</a>.</p>

<p>(image of Gyroscope by stop that pigeon! taken from <a href="http://www.flickr.com/photos/25312309@N05/2651042796/">http://www.flickr.com/photos/25312309@N05/2651042796/</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse DemoCamp Hamburg November 2010]]></title>
    <link href="http://www.peterfriese.de/eclipse-democamp-hamburg-november-2010/"/>
    <updated>2010-11-15T07:28:17+00:00</updated>
    <id>http://www.peterfriese.de/eclipse-democamp-hamburg-november-2010</id>
    <content type="html"><![CDATA[<p>Last Friday was a happy day for Java developers in Hamburg: not only did Apple and Oracle announce their plan to continue development of Java on the Mac OSX platform, but we also had the pleasure to host this fall&rsquo;s instance of Eclipse DemoCamp Hamburg in a bookstore!</p>

<!-- more -->


<p>We had a nice lineup of four speakers &ndash; unfortunately not all of them were able to attend due to a cold, but we were lucky enough to find one additional speaker &ndash; thanks Jan!</p>

<p>After a casual meet-and-greet with <a href="http://www.fritz-kola.de/">Fritz Kola</a> and Pretzels, <a href="http://twitter.com/#!/robilad">Dalibor Topic</a> opened the official part of the evening with an overview of what&rsquo;s coming up in JDK7 and JDK8. Here&rsquo;s a list of things that sound quite interesting:</p>

<ul>
<li>Support for dynamically-typed languages (InvokeDynamic) (<a href="http://openjdk.java.net/projects/mlvm">project page</a>)</li>
<li>Small language enhancements (Project Coin) (<a href="http://openjdk.java.net/projects/coin/">project page</a>)</li>
<li>An even newer NIO (<a href="http://openjdk.java.net/projects/nio/">project page</a>)</li>
</ul>


<p>The good news of the day of course was a <a href="http://blogs.oracle.com/henrik/2010/11/oracle_and_apple_announce_openjdk_project_for_osx.html">press release announcing OpenJDK for Mac OSX</a>. Nevertheless, <a href="http://twitter.com/#!/robilad/status/3129373515321344">Dalibor demoed a freshly built OpenJDK 7 BSD port</a> on his MacBook.</p>

<p><a href="/images/2010-11-15-eclipse-democamp-hamburg-november-2010/democamp01.png" class="fancybox" title="Dalibor Topic"><img class="right" src="/thumbs/democamp01_300x224.png" alt="Dalibor Topic" /></a></p>

<p>After a short break, it was <a href="http://eclipsesource.com/blogs/author/rsternberg/">Ralf Sternberg&rsquo;s turn</a> to give an overview of <a href="http://www.eclipse.org/rap/">RAP</a> and explain what Single Sourcing is. With the help of RAP, it is rather easy to bring Eclipse RCP applications to the web. Of course, you&rsquo;ll have to pay attention to a few things, as Ralf pointed out: usually, RCP applications are single-user apps, whereas web applications are inherently multi-user enabled. Fortunately, RAP comes with a few utilities that cater for this fact.</p>

<p>One thing I was delighted to learn: not only do RAP applications run on the iPad, but also do they support drawing using the SWT API, as you can see in the following video:</p>

<p><div class="embed-video-container"><iframe src="http://player.vimeo.com/video/16829527 "></iframe></div></p>

<p>In the last sessions, <a href="http://www.eclipse.org/Xtext/">Xtext</a> committer <a href="http://koehnlein.blogspot.com/">Jan Köhnlein</a> showed us some of the things coming up in Xtext 2.0. Being text-addicted, Jan refrained from using slides and used the IDE instead to deliver his talk:</p>

<p><a href="/images/2010-11-15-eclipse-democamp-hamburg-november-2010/democamp02.png" class="fancybox" title="Jan Köhnlein talking about Xbase and Xtext"><img class="right" src="/thumbs/democamp02_300x224.png" alt="Jan Köhnlein talking about Xbase and Xtext" /></a></p>

<p>Jan showed us how Xbase (no, not <a href="http://en.wikipedia.org/wiki/Xbase">xBase</a>) can be used to develop DSLs (and even GPLs) that not only describe structural features but also behavior. He also demoed Xdoc, a newly invented documentation language, and the fancy new Xtext syntax view (featuring <a href="http://en.wikipedia.org/wiki/Syntax_diagram">railroad diagrams</a>).</p>

<p>After the demos, we had some time for chats and impromptu hack sessions. Given the event took place in a book store (many thanks to Lehmanns for having us!), you could also browse and buy books.</p>

<p>Thanks to the fact we only had about 40 attendees, there were plenty of chances for networking which people really seemed to enjoy.</p>

<p>I&rsquo;d like to thank everybody who attended the DemoCamp or gave a demo! <a href="http://twitter.com/#!/peterfriese">Follow me on twitter</a> to be informed ahead of time for the next DemoCamp!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Updated] Use your iPhone, Android, or BlackBerry to build Your Eclipse Summit Europe 2010]]></title>
    <link href="http://www.peterfriese.de/updated-use-your-iphone-android-or-blackberry-to-build-your-eclipse-summit-europe-2010/"/>
    <updated>2010-11-01T11:45:02+00:00</updated>
    <id>http://www.peterfriese.de/updated-use-your-iphone-android-or-blackberry-to-build-your-eclipse-summit-europe-2010</id>
    <content type="html"><![CDATA[<p>As I&rsquo;m writing this, Eclipse Summit Europe 2010 is merely hours away and everyone is getting excited to get there and meet Eclipse family.</p>

<p>I think the program committee have done a great job at putting together an exciting conference program with lots of technical sessions, interactive tutorials and inspiring keynotes.</p>

<p>As a special treat for smart phone users, we&rsquo;re offering a conference schedule app for iPhone, Android and all other smart phones that come with a browser.</p>

<!-- more -->


<p>Besides reviewing the <strong>conference schedule</strong> and getting to know the <strong>speakers</strong> you can use the apps to create your very <strong>own personal conference schedule</strong>. Usually, conference attendees will use the printed conference program to mark their favorite talks &ndash; and then leave their personalized copy of the program in their hotel room or elsewhere in the conference halls!</p>

<p>This will probably not happen with the smart phone app, although I can recall somebody lost their iPhone at this year&rsquo;s EclipseCon&hellip;</p>

<p>Without further ado, here&rsquo;s a preview of the iPhone app in action:</p>

<p><div class="embed-video-container"><iframe src="http://player.vimeo.com/video/16367311 "></iframe></div></p>

<p>You can download the <strong>iPhone app</strong> from the App Store. It is available world-wide and we already have a few downloads from Singapore, Korea and India! For your convenience, <a href="http://bit.ly/ese_app_intl">here&rsquo;s the link to the app</a>.</p>

<p>We also prepared a version for <strong>Android</strong> users. Here&rsquo;s how it will look like on your Android device:
<a href="/images/2010-11-01-updated-use-your-iphone-android-or-blackberry-to-build-your-eclipse-summit-europe-2010/ESE_Android.png" class="fancybox" title="ESE Android app"><img class="center" src="/thumbs/ESE_Android_151x300.png" alt="ESE Android app" /></a></p>

<p>Head over to the Android Marketplace and search for &ldquo;eclipse summit&rdquo;, or use your barcode scanner:</p>

<p><a href="/images/2010-11-01-updated-use-your-iphone-android-or-blackberry-to-build-your-eclipse-summit-europe-2010/1078516-1288452914800.png" class="fancybox" title="Android app barcode"><img class="center" src="/thumbs/1078516-1288452914800_164x164.png" alt="Android app barcode" /></a></p>

<p>The <strong>mobile web app</strong> <del>will be available from the Wifi landing page at the conference venue</del> is available via the following URL: <a href="http://bit.ly/ese_app_mobile2">http://bit.ly/ese_app_mobile2/</a>.</p>

<p><a href="/images/2010-11-01-updated-use-your-iphone-android-or-blackberry-to-build-your-eclipse-summit-europe-2010/mobileweb3.png" class="fancybox" title="Mobile Web App"><img class="center" src="/thumbs/mobileweb3_150x192.png" alt="Mobile Web App" /></a></p>

<p><del>Rumor has it even BlackBerry users will get a native app.</del> <a href="http://ekkescorner.wordpress.com/2010/11/02/ese-app-for-blackberry/">Ekke</a> has created a native app for BlackBerry.</p>

<p>Using these applications, you&rsquo;ll be able to put together <strong>your Eclipse Summit Europe 2010</strong> in no time. Enjoy!</p>

<p>The iPhone, Android and mobile web apps have been built by a dedicated team of software engineers at itemis I have the pleasure to work with. If you want to learn how we build applications like these, attend our sessions:</p>

<ul>
<li>Tuesday, 14:00 &ndash; <a href="http://www.eclipsecon.org/summiteurope2010/sessions/?page=sessions&amp;id=1940">Mobile Development Symposium</a></li>
<li>Thursday 10:30 &ndash; <a href="http://www.eclipsecon.org/summiteurope2010/sessions/?page=sessions&amp;id=1733">Models To Go: How We Built a DSL for Mobile Apps With Tools From the Eclipse</a></li>
</ul>


<p>Also, be sure to drop by the new website for our mobile business: <a href="http://mobile.itemis.com">http://mobile.itemis.com</a> and follow us on Twitter: <a href="http://twitter.com/itemismobile">@itemismobile</a>.</p>

<p>Enjoy <del>the</del> your conference!</p>
]]></content>
  </entry>
  
</feed>
